from __future__ import annotations

from typing import Any, Iterable, Iterator, List, Sized, Union, cast

from numpy import ndarray
from numpy.typing import NDArray
from attr import Attribute, frozen, field
from typing_extensions import overload


def _int_to_float(value: Any) -> Any:
    return float(value) if type(value) is int else value


def _to_float_list(value: Union[NDArray[Any], Iterable[float], Iterable[int]]) -> List[float]:
    if isinstance(value, ndarray):
        value_list = cast(List[Any], value.tolist())
    else:
        value_list = list(value)

    return [_int_to_float(value) for value in value_list]


def _values_validator(obj: Any, attr: Attribute[Any], values: List[Any]) -> None:
    if not all(type(value) is float for value in values):
        raise TypeError("sample values must all be floats")


@frozen(slots=True)
class Sample(Sized, Iterable[float]):
    """Representation of a sample generated by the optimizer.

    Args:
        values: The sample values

    Attributes:
        values: The sample values
    """

    values: List[float] = field(converter=_to_float_list, validator=_values_validator)

    def __len__(self) -> int:
        return len(self.values)

    def __iter__(self) -> Iterator[float]:
        return iter(self.values)

    @overload
    def __getitem__(self, index: int) -> float:
        ...

    @overload
    def __getitem__(self, index: slice) -> List[float]:
        ...

    def __getitem__(self, index: Union[int, slice]) -> Union[float, List[float]]:
        if isinstance(index, (int, slice)):
            return self.values[index]
        else:
            raise TypeError()
