Models
======

In order to test a system using PSY-TaLiRo it must be represented as a model. A model is
responsible for accepting a sample generated by the optimizer and returning an array of system
states and an array of corresponding time stamps which together represent the state of the system
over time. A model can also return an instance of a Falsification object, which indicates to the
PSY-TaLiRo toolbox that the sample should be assigned a cost of negative infinity.

Models can be implemented using the model protocol, which requires that a ``simulate`` method be
defined. The ``simulate`` method is responsible for managing and executing the model representation.
The ``simulate`` method must accept a data object that contains the simulation parameters generated
from the sample selected by the optimizer. There are three attributes of the data object

- Static parameters
- Interpolators
- Interval
 
For convience, a class can inherit from Model to guide implementation of the ``simulate`` method.

.. _model:

.. autoclass:: staliro.core.model.Model
    :members:

.. _simulation_result:

.. autoclass:: staliro.core.model.ModelData
    :members:

.. _falsification:

.. autoclass:: staliro.core.model.Failure
    :members:


PSY-TaLiRo also provides two general model implementations that can be used to build models without
creating a domain-specific sub-class. Each model accepts a delegate function which is responsible
for the execution of the simulation given inputs generated by the optimizer.


Blackbox Model
--------------

The blackbox model is the most general model provided by the PSY-TaLiRo toolbox. The blackbox
model does not make any assumptions about the underlying system it represents, so the delegate
function must return the properly structured output expected by other PSY-TaLiRo components.

The delegate function expected by the blackbox must accept 3 arguments:

- The static parameters
- The interpolated signal times
- The interpolated signal values

You may notice that the delegate function does not accept any interpolation functions. This is
because the blackbox model evaluates the signal interpolators at a fixed interval called the
**sampling interval**. The simulation interval is divided into equal-sized time steps and each
signal interpolator is evaluated at each time.

.. _blackbox:

.. autoclass:: staliro.models.Blackbox
    :members:

In addition to the ``Blackbox`` class, a ``blackbox`` decorator is provided which is the
recommended way of constructing a Blackbox model. The decorator is more clear and doesn't require
you to give the function a different name in order to avoid re-assignment.

.. code-block:: python

    from staliro.models import Blackbox, blackbox

    # Not recommended

    def delegate(params, times, signals):
        ...

    model = Blackbox(delegate)

    # Recommended

    @blackbox()
    def model(params, times, signals):
        ...


ODE Model
---------
The ODE model assumes that the function provided returns the change in state of the system rather
than a new state. The return value of this function is integrated over several time intervals to
generate new states. This model requires the delegate function to accept the current time t, the
current state vector X and the current input signal value vector U, and return a state change
vector. 

.. _ode:

.. autoclass:: staliro.models.ODE
    :members:
    :undoc-members:

Just like the Blackbox model, the ``ode`` decorator is the preferred method of constructing an ODE
model.

.. code-block:: python

    from staliro.models import ODE, ode

    # Not recommended

    def delegate(time, state, signals):
        ...

    model = ODE(delegate)

    # Recommended

    @ode()
    def model(time, state, signals):
        ...
