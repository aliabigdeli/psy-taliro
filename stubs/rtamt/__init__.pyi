from enum import Enum
from typing import List, Tuple, Dict

class RTAMTException(Exception): ...
class LTLException(RTAMTException): ...
class LTLPastifyException(LTLException): ...
class LTLParseException(LTLException): ...
class LTLOfflineException(LTLException): ...
class LTLSpecificationException(LTLException): ...
class LTLNotImplementedException(LTLException): ...
class STLException(RTAMTException): ...
class STLParseException(STLException): ...
class STLOfflineException(STLException): ...
class STLSpecificationException(STLException): ...
class STLNotImplementedException(STLException): ...

class Semantics(Enum):
    STANDARD = ...
    OUTPUT_ROBUSTNESS = ...
    INPUT_VACUITY = ...
    INPUT_ROBUSTNESS = ...
    OUTPUT_VACUITY = ...

class Language(Enum):
    PYTHON = ...
    CPP = ...

class _BaseSpecification:
    spec: str
    def __init__(self, semantics: Semantics, language: Language = ...): ...
    def declare_var(self, name: str, type: str) -> None: ...
    def parse(self) -> None: ...
    def pastify(self) -> None: ...

class STLDenseTimeSpecification(_BaseSpecification):
    def evaluate(
        self, *args: Tuple[str, List[Tuple[float, float]]]
    ) -> List[Tuple[float, float]]: ...

class STLDiscreteTimeSpecification(_BaseSpecification):
    def set_sampling_period(self, period: float, unit: str, tolerance: float) -> None: ...
    def evaluate(self, data: Dict[str, List[float]]) -> List[Tuple[float, float]]: ...
